{
  "hash": "ec417c9be7f1897bde9f2adb5ccb300a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Converting a calendar export from .ics to .csv\"\neditor: visual\n---\n\n\n\nOK, so this is my first attempt at a blog. It came about because I had a discussion with my Dean about how much time I was spending on teaching vs research vs engagement. Being a data nerd, I record my activities in my Mac Calendar app as a matter of course, so I have a record of what I have been doing. But getting data out of a Calendar app and into a format you can analyse is more difficult. So I decided to write a script to get this done. And because most other options for doing this either cost money, or ask you to trust some or other skeevy website, I thought I'd share my code. Of course, sharing code also means that others can help me improve it, so let me know where I went wrong.\n\nFirst things first, the packages we'll need:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # For data munging\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(parallel) # To count the cores on my machine, amongst other things\nlibrary(furrr) # To allow me to deploy a function in parallel\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: future\n```\n\n\n:::\n:::\n\n\n\nNext, we get the data — after I exported my calendar to a `.ics` file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- read_lines(\"/Users/davidschoeman/Dropbox/Documents/USC_Admin/Calendar_export_27092024.ics\") %>% # It's a text file so read it as lines of text\n    tibble() %>% # Make the result into a tibble\n    rename(Info = 1) # It'll have only one column; I'll call it Info\n```\n:::\n\n\n\nNext, I figure out which rows indicate the start and end of each events, and I clump them together into a tibble:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nevents <- tibble(Starts = dat %>%\n  \t\t\t\t\t\t\t\t \tpull(Info) %>% \n  \t\t\t\t\t\t\t\t \tstr_which(\"BEGIN:VEVENT\"), # You might need to change the event-start identifier\n  \t\t\t\t\t\t\t\t Ends = dat %>%\n  \t\t\t\t\t\t\t\t \tpull(Info) %>% \n  \t\t\t\t\t\t\t\t \tstr_which(\"END:VEVENT\")) # You might need to change the event-end identifier\n```\n:::\n\n\n\nNext, we need a function to pull out the required details from each event:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_event_deets <- function(s, e) {\n    \td <- dat[s:e,] # A row from dat, based on one row from events\n    \tget_bit <- function(b) { # A function to look for a keyword and return the data\n    \t\td %>% \n    \t\t\tfilter(str_detect(Info, b)) %>% # Find the row in question \n    \t\t\tdeframe() %>% # Make it a vector\n    \t\t\tstr_remove(b) %>% # Remove the keyword\n    \t\t\tstr_sub(2, -1) # Remove just the first character, which is either ; or :, leaving just the info to extract\n    \t\t}\n    \treturn(list(Start = get_bit(\"DTSTART\") %>% \n    \t\t\t\t\t\t\tstr_remove(\"TZID=\") %>% # Remove the time identifier, if present\n    \t\t\t\t\t\t\tstr_split(\":\") %>% # Split on the colon\n    \t\t\t\t\t\t\tunlist() %>% # Make it a vector\n    \t\t\t\t\t\t\tnth(2) %>% # Select second element\n    \t\t\t\t\t\t\tstrptime(., \"%Y%m%dT%H%M%OS\", tz = \"australia/brisbane\"), # Make it time\n    \t\t\t\t\t\tEnd = get_bit(\"DTEND\") %>% \n    \t\t\t\t\t\t\tstr_remove(\"TZID=\") %>% \n    \t\t\t\t\t\t\tstr_split(\":\") %>% \n    \t\t\t\t\t\t\tunlist() %>% \n    \t\t\t\t\t\t\tnth(2) %>% \n    \t\t\t\t\t\t\tstrptime(., \"%Y%m%dT%H%M%OS\", tz = \"australia/brisbane\"), \n    \t\t\t\t\t\tEvent = get_bit(\"SUMMARY\")))\n    \t}\n```\n:::\n\n\n\nFinally, we deploy the function against the `events` tibble...in parallel, because it's quite large. If you prefer to run on a single core, hash out the lines starting with `plan()`, and delete `future_` from the line with `future_pmap`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplan(multisession, workers = detectCores()-4) # Using all but four of my cores\n    csv_cal <- future_pmap(events, # For each row of events\n                           ~get_event_deets(..1, ..2)) %>%  # Get the details\n      bind_rows() %>% # Bind output lists into a tibble\n      arrange(Start) # Place in sequential order\n    plan(sequential)\n```\n:::\n\n\n\nFinally, we save the output:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(csv_cal, \"/Users/davidschoeman/Dropbox/Documents/USC_Admin/Calendar.csv\") # Write the output to a file\n```\n:::\n\n\n\nLet's have a peek at what that tibble looks like (bearing in mind that this is made up data):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncsv_cal\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10,751 × 3\n   Start               End                 Event                                \n   <dttm>              <dttm>              <chr>                                \n 1 2010-02-01 10:00:00 2010-02-01 11:00:00 BEnvSci Review Meet                  \n 2 2012-10-01 11:30:00 2012-10-01 13:00:00 meetings and IT software interests   \n 3 2012-10-02 12:00:00 2012-10-02 13:30:00 New Researchers Group Oct meeting    \n 4 2012-10-10 15:00:00 2012-10-10 17:00:00 Mobile Business Needs Workshop - Aca…\n 5 2012-10-16 12:00:00 2012-10-16 14:00:00 Future Fellowship Applicants Lunch w…\n 6 2012-11-06 09:00:00 2012-11-08 17:00:00 Re: Introductory R Workshop at USC   \n 7 2012-12-18 11:00:00 2012-12-18 12:00:00 EIF Follow Up Meeting                \n 8 2013-01-23 15:00:00 2013-01-23 15:15:00 Dave Shoeman                         \n 9 2013-02-25 15:00:00 2013-02-25 15:30:00 Fraser Island research               \n10 2013-02-26 12:00:00 2013-02-26 13:00:00 ClimateWatch marine science meeting  \n# ℹ 10,741 more rows\n```\n\n\n:::\n:::\n\n\n\nOK, so now that we have the data, we can search for keywords and see how much time we've spent on those activities. We'll first filter for a specific time period and make sure that our timezone is correctly set (this is important if you pull in the `.csv` we saved earlier):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstrt_date <- \"2024-01-01\" # A start date\nend_date <- \"2024-12-31\" # An end date\n\ndat <- csv_cal %>% \n\t\tfilter(Start >= strt_date & Start <= end_date) %>% # Filter by period of interest\n\t\tmutate(Start = with_tz(Start, \"australia/brisbane\"), # Ensure that my timezone is set correctly\n\t\t\t\t\t End = with_tz(End, \"australia/brisbane\"), # And again\n\t\t\t\t\t Duration = (End - Start) %>% \n\t\t\t\t\t \tas.numeric()/60/60) # Compute the duration of each event in hours\n```\n:::\n\n\n\nNext, we group by event name, sum the time committed and remove any \"activities\" that might be placeholders rather than actual time commitments:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_spent <- dat %>% \n\t\tgroup_by(Event) %>% \n\t\tsummarise(Time = sum(Duration)) %>% # Compute the summed duration committed to each event\n\t\tfilter(str_detect(Event, \"WFH|Playing Wordle\", negate = TRUE)) # Remove any specific events that are not for logging time\n```\n:::\n\n\n\nFinally, we write a short function to extract all lines containing a specific keyword, then use that function to look around:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_time <- function(a) {\n\t\t\tts <- time_spent %>% \n\t\t\t\tfilter(str_detect(Event, a))\n\t\t\treturn(list(Time_table = data.frame(ts), # Output all rows containing the keyword, in case you need to check\n\t\t\t\t\t\t Total = ts %>% \n\t\t\t\t\t\t\t\t\t\tpull(Time) %>% \n\t\t\t\t\t\t\t\t\t\tsum())) # Also report total time spent on events containing that keyword\n\t\t\t}\n```\n:::\n\n\n\nOK, so let's see how much time I have spent on my year-2 stats course so far this year:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_time(\"ANM203\")$Total\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 239.75\n```\n\n\n:::\n:::\n\n\n\nSooo...240 hours...and we still have four weeks of semester to go, and a major assignment to mark...oh well...\n\nOK, in the end, you can see that it's not particularly difficult, but I hope this saves you some time if you ever want to analyse calendar data yourself.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}